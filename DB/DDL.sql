-- GLOBAL PERMISSIONS
-- GRANT CREATE SESSION, TABLE, PROCEDURE, FUNCTION, TRIGGER, SEQUENCE, VIEW.

-- GLOBAL DROP
DROP SEQUENCE ANONYMOUS_SEQUENCE;
DROP SEQUENCE TRANS_SEQUENCE;

DROP TABLE BANK;
DROP TABLE TRANSACTIONS;
DROP TABLE ANONYMOUS;
DROP TABLE BIO;
DROP TABLE ADDRESS;
DROP TABLE USERS;
DROP TABLE HOSPITAL;
DROP TABLE PINGRAPHY;
DROP TABLE GEOGRAPHY;

-- TABLE DEFENITION
CREATE TABLE GEOGRAPHY(STATE VARCHAR(32) NOT NULL, DISTRICT VARCHAR(32) NOT NULL, USERCOUNT NUMBER DEFAULT 0 NOT NULL, PRIMARY KEY(STATE, DISTRICT));
CREATE TABLE PINGRAPHY(PINCODE NUMBER NOT NULL PRIMARY KEY, USERCOUNT NUMBER DEFAULT 0 NOT NULL);

CREATE TABLE USERS(USERID VARCHAR(16) NOT NULL PRIMARY KEY, PASSWORD VARCHAR(32) NOT NULL, USERTYPE CHAR DEFAULT 'P' NOT NULL);
CREATE TABLE HOSPITAL(HSP VARCHAR(16) NOT NULL PRIMARY KEY, PASSWORD VARCHAR(32) NOT NULL, NAME VARCHAR(32) NOT NULL UNIQUE);

CREATE TABLE ADDRESS(ADDRID VARCHAR(16) NOT NULL PRIMARY KEY, AD1 VARCHAR(64), AD2 VARCHAR(64), PHONE NUMBER, DISTRICT VARCHAR(32), STATE VARCHAR(32), PINCODE NUMBER REFERENCES PINGRAPHY, FOREIGN KEY(STATE, DISTRICT) REFERENCES GEOGRAPHY);

CREATE TABLE BIO(USERID VARCHAR(16) NOT NULL REFERENCES USERS ON DELETE CASCADE PRIMARY KEY, NAME VARCHAR(32) NOT NULL, BG CHAR(3) NOT NULL, AGE NUMBER NOT NULL, ADDRID VARCHAR(16) NOT NULL REFERENCES ADDRESS);
CREATE TABLE ANONYMOUS(ANYID NUMBER PRIMARY KEY, NAME VARCHAR(32) NOT NULL, BG CHAR(3) NOT NULL, AGE NUMBER NOT NULL, ADDRID VARCHAR(16) NOT NULL REFERENCES ADDRESS);

CREATE TABLE TRANSACTIONS(TRANSID VARCHAR(16) NOT NULL PRIMARY KEY, TRANSDATE DATE DEFAULT SYSDATE NOT NULL, USERID VARCHAR(16) NOT NULL, TRANSTYPE CHAR NOT NULL, BENEFICIARY VARCHAR(16) NOT NULL, BG CHAR(3) NOT NULL, HSP VARCHAR(16) NOT NULL REFERENCES HOSPITAL, AUTHORISER VARCHAR(32) DEFAULT 'SELF' NOT NULL, TRANSSTATUS CHAR DEFAULT 'P' NOT NULL);
CREATE TABLE BANK(BG CHAR(3) NOT NULL PRIMARY KEY, QTY NUMBER DEFAULT 0 NOT NULL);

-- SEQUENCE CREATION

CREATE SEQUENCE ANONYMOUS_SEQUENCE START WITH 1000 MINVALUE 1000 MAXVALUE 9999 INCREMENT BY 1 NOCYCLE;
CREATE SEQUENCE TRANS_SEQUENCE START WITH 10000 INCREMENT BY 1 MINVALUE 10000 MAXVALUE 99999 NOCYCLE;

-- TABLE TRIGGER
CREATE OR REPLACE TRIGGER ANONYMOUS_DELETE
AFTER DELETE ON ANONYMOUS
FOR EACH ROW
BEGIN
    DELETE FROM ADDRESS WHERE ADDRID = :OLD.ANYID;
END;
/

CREATE OR REPLACE TRIGGER UPDATE_ADDRESS
AFTER DELETE ON BIO
FOR EACH ROW
BEGIN
    DELETE FROM ADDRESS WHERE ADDRID = :OLD.USERID;
END;
/

CREATE OR REPLACE TRIGGER UPDATE_GRAPHY
AFTER INSERT OR UPDATE OR DELETE ON ADDRESS
FOR EACH ROW
DECLARE
    PINCOUNT NUMBER;
BEGIN
    PINCOUNT := 1;
    IF INSERTING THEN
        UPDATE GEOGRAPHY SET USERCOUNT = USERCOUNT + 1 WHERE STATE = :NEW.STATE AND DISTRICT = :NEW.DISTRICT;
        SELECT COUNT(*) INTO PINCOUNT FROM PINGRAPHY WHERE PINCODE = :NEW.PINCODE;
        IF (PINCOUNT > 0) THEN
            UPDATE PINGRAPHY SET USERCOUNT = USERCOUNT + 1 WHERE PINCODE = :NEW.PINCODE;
        ELSE
            INSERT INTO PINGRAPHY VALUES(:NEW.PINCODE, 1);
        END IF;
    END IF;
    IF UPDATING THEN
        UPDATE GEOGRAPHY SET USERCOUNT = USERCOUNT + 1 WHERE STATE = :NEW.STATE AND DISTRICT = :NEW.DISTRICT;
        UPDATE GEOGRAPHY SET USERCOUNT = USERCOUNT - 1 WHERE STATE = :OLD.STATE AND DISTRICT = :OLD.DISTRICT;
        UPDATE PINGRAPHY SET USERCOUNT = USERCOUNT + 1 WHERE PINCODE = :NEW.PINCODE;
        UPDATE PINGRAPHY SET USERCOUNT = USERCOUNT - 1 WHERE PINCODE = :OLD.PINCODE;
    END IF;
    IF DELETING THEN
        UPDATE GEOGRAPHY SET USERCOUNT = USERCOUNT - 1 WHERE STATE = :OLD.STATE AND DISTRICT = :OLD.DISTRICT;        
        UPDATE PINGRAPHY SET USERCOUNT = USERCOUNT - 1 WHERE PINCODE = :OLD.PINCODE;
    END IF;
END;
/

-- PROCEDURES
CREATE OR REPLACE PROCEDURE INSERT_BIO_ADDRESS(
    IN_USERID USERS.USERID%TYPE,
    IN_NAME BIO.NAME%TYPE,
    IN_BG BIO.BG%TYPE,
    IN_AGE BIO.AGE%TYPE,
    IN_AD1 ADDRESS.AD1%TYPE,
    IN_AD2 ADDRESS.AD2%TYPE,
    IN_PHONE ADDRESS.PHONE%TYPE,
    IN_DISTRICT ADDRESS.DISTRICT%TYPE,
    IN_STATE ADDRESS.STATE%TYPE,
    IN_PINCODE ADDRESS.PINCODE%TYPE
)
IS
BEGIN
    INSERT INTO ADDRESS VALUES(IN_USERID, IN_AD1, IN_AD2, IN_PHONE, IN_DISTRICT, IN_STATE, IN_PINCODE);
    INSERT INTO BIO VALUES(IN_USERID, IN_NAME, IN_BG, IN_AGE, IN_USERID);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE DONATE(
    IN_USERID TRANSACTIONS.USERID%TYPE,
    IN_BG TRANSACTIONS.BG%TYPE,
    IN_HSP TRANSACTIONS.HSP%TYPE
)
IS
    TID VARCHAR(8);
BEGIN
    TID := 'T' || TRANS_SEQUENCE.NEXTVAL;
    INSERT INTO TRANSACTIONS(TRANSID, USERID, TRANSTYPE, BENEFICIARY, BG, HSP) VALUES(TID, IN_USERID, 'D', IN_USERID, IN_BG, IN_HSP);
    UPDATE BANK SET QTY = QTY + 1 WHERE BG = IN_BG;
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE REQUEST(
    IN_USERID TRANSACTIONS.USERID%TYPE,
    IN_BENEFICIARY TRANSACTIONS.BENEFICIARY%TYPE,
    IN_BG TRANSACTIONS.BG%TYPE,
    IN_HSP TRANSACTIONS.HSP%TYPE,
    IN_AUTHORISER TRANSACTIONS.AUTHORISER%TYPE
)
IS
    TID VARCHAR(8);
BEGIN
    TID := 'T' || TRANS_SEQUENCE.NEXTVAL;
    INSERT INTO TRANSACTIONS(TRANSID, USERID, TRANSTYPE, BENEFICIARY, BG, HSP, AUTHORISER) VALUES(TID, IN_USERID, 'R', IN_BENEFICIARY, IN_BG, IN_HSP, IN_AUTHORISER);
    UPDATE BANK SET QTY = QTY - 1 WHERE BG = IN_BG;
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE GENERATE_VIEW(
    IN_USERID TRANSACTIONS.USERID%TYPE
)
AS
    STMT VARCHAR(2048);
BEGIN
    STMT := 'CREATE OR REPLACE VIEW USER_VIEW AS
                SELECT TRANSID, TRANSDATE, TRANSTYPE, B_NAME, BG, H_NAME, AUTHORISER FROM ((
                (SELECT TRANSID, TRANSDATE, TRANSTYPE, BG, BENEFICIARY, AUTHORISER, HSP FROM TRANSACTIONS WHERE USERID = ''' || IN_USERID || ''') 
                INNER JOIN (SELECT USERID, NAME AS B_NAME FROM BIO) ON BENEFICIARY = USERID)
                INNER JOIN (SELECT HSP AS H_CODE, NAME AS H_NAME FROM HOSPITAL) ON HSP = H_CODE)
            UNION
                SELECT TRANSID, TRANSDATE, TRANSTYPE, B_NAME, BG, H_NAME, AUTHORISER FROM ((
                (SELECT TRANSID, TRANSDATE, TRANSTYPE, BG, BENEFICIARY, AUTHORISER, HSP FROM TRANSACTIONS WHERE USERID = ''' || IN_USERID || ''') 
                INNER JOIN (SELECT ANYID, NAME AS B_NAME FROM ANONYMOUS) ON BENEFICIARY = TO_CHAR(ANYID))
                INNER JOIN (SELECT HSP AS H_CODE, NAME AS H_NAME FROM HOSPITAL) ON HSP = H_CODE)';
    EXECUTE IMMEDIATE STMT;        
END;
/

-- FUNCTIONS
CREATE OR REPLACE FUNCTION VALIDATE_USER(
    IN_USERID USERS.USERID%TYPE,
    IN_PASSWORD USERS.USERID%TYPE
)
RETURN VARCHAR
IS
    OUT_STAT VARCHAR(32) := '';
    USER_COUNT NUMBER;
    USER_PASS USERS.USERID%TYPE;
BEGIN
    USER_COUNT := 0;
    SELECT COUNT(*) INTO USER_COUNT FROM USERS WHERE USERID = IN_USERID;
    IF USER_COUNT = 0 THEN
        OUT_STAT := 'NOT REGISTERED';
        
    ELSE
        SELECT PASSWORD INTO USER_PASS FROM USERS WHERE USERID = IN_USERID;
        IF IN_PASSWORD = USER_PASS THEN
            OUT_STAT := 'VALID';
        ELSE
            OUT_STAT := 'INCORRECT CREDENTIALS';
        END IF;
    END IF;
    RETURN OUT_STAT;
END;
/ 

CREATE OR REPLACE FUNCTION INSERT_ANONYMOUS(
    IN_NAME BIO.NAME%TYPE,
    IN_BG BIO.BG%TYPE,
    IN_AGE BIO.AGE%TYPE,
    IN_AD1 ADDRESS.AD1%TYPE,
    IN_AD2 ADDRESS.AD2%TYPE,
    IN_PHONE ADDRESS.PHONE%TYPE,
    IN_DISTRICT ADDRESS.DISTRICT%TYPE,
    IN_STATE ADDRESS.STATE%TYPE,
    IN_PINCODE ADDRESS.PINCODE%TYPE
)
RETURN ANONYMOUS.ANYID%TYPE
IS
    OUT_ANYID ANONYMOUS.ANYID%TYPE;
BEGIN
    OUT_ANYID := ANONYMOUS_SEQUENCE.NEXTVAL;

    INSERT INTO ADDRESS VALUES(OUT_ANYID, IN_AD1, IN_AD2, IN_PHONE, IN_DISTRICT, IN_STATE, IN_PINCODE);
    INSERT INTO ANONYMOUS VALUES(OUT_ANYID, IN_NAME, IN_BG, IN_AGE, OUT_ANYID);

    RETURN OUT_ANYID;
END;
/

-- PLUG ALL CSV INSERTIONS
-- 